/**
 * @file
 * @brief Камера
 */

#pragma once

#include "renderer/types.hpp"

namespace renderer {

/**
 * @brief Камера в 3D пространстве
 */
class Camera {
public:
    /**
     * @brief Создание камеры
     *
     * Создает камеру, расположенную в переданной точке, c заданным рысканием, тангажем, полем
     * зрения и фокусным расстоянием
     *
     * Точка задает изначальную точку расположения камеры в сцене, по умолчанию (0, 0, 0)
     *
     * Рыскание задает угол в градусах вокруг вертикальной оси z относительно направления X,
     * положительное направление против часовой стрелки, по умолчанию 0
     *
     * Тангаж задает угол в градусах относительно горизонтали, параллельной плоскости XY,
     * положительное направление в верхнюю полуплоскость. Значение должно быть в диапазоне от -90.0
     * до 90.0 включительно, по умолчанию 0
     *
     * Горизонтальное поле зрения задается в градусах в диапазоне от 0.0 до 360.0 (не включая
     * крайние значения). По умолчанию 90.0
     *
     * Фокусное расстояние задается в диапазоне от 0.1 до 10.0. По умолчанию 1.0
     *
     * @param[in] position Позиция камеры
     * @param[in] yaw Угол рыскания
     * @param[in] pitch Угол тангажа
     * @param[in] fov_x Горизонтальное поле зрения
     * @param[in] focal_length Фокусное расстояние
     */
    explicit Camera(const Point& position = Vector{0, 0, 0}, const float yaw = 0,
                    const float pitch = 0, const float fov_x = 90, const float focal_length = 1.0);

    /**
     * @brief Получение матрицы вида
     *
     * Возвращает матрицу вида камеры
     *
     * @return Матрица вида
     */
    Matrix GetViewMatrix() const;

    /**
     * @brief Получение позиции
     *
     * Возвращает текущую позицию камеры в сцене
     *
     * @return Позиция камеры
     */
    Point GetPosition() const;

    /**
     * @brief Установка позиции
     *
     * Устанавливает новую позицию камеры в сцене
     *
     * @param[in] new_position Новая позиция
     */
    void SetPosition(const Point& new_position);

    /**
     * @brief Получения угла рыскания
     *
     * Возвращает текущий угол рыскания камеры
     *
     * @return Угол рыскания
     */
    float GetYaw() const;

    /**
     * @brief Установка угла рыскания
     *
     * Устанавливает новый угол рыскания камеры в градусах
     *
     * @param[in] new_yaw Новый угол рыскания
     */
    void SetYaw(const float new_yaw);

    /**
     * @brief Получения угла тангажа
     *
     * Возвращает текущий угол тангажа камеры
     *
     * @return Угол тангажа
     */
    float GetPitch() const;

    /**
     * @brief Установка угла тангажа
     *
     * Устанавливает новый угол тангажа в градусах
     *
     * @param[in] new_pitch Новый угол тангажа
     */
    void SetPitch(const float new_pitch);

    /**
     * @brief Получение текущего горизонтального угла обзора
     *
     * Возвращает текущий горизонтальный угол обзора в градусах
     *
     * @return Угол обзора
     */
    float GetFovX() const;

    /**
     * @brief Установка нового горизонтального угла обзора
     *
     * Устанавливает новый горизонтальный угол обзора в градусах. Должен быть в диапазоне от 0.0 до
     * 360.0 не включая границы
     *
     * @param[in] new_fov_x Новый угол обзора
     */
    void SetFovX(const float new_fov_x);

    /**
     * @brief Получение текущего фокусного расстояния
     *
     * Возвращает текущее фокусное расстояние камеры
     *
     * @return Фокусное расстояние
     */
    float GetFocalLength() const;

    /**
     * @brief Установка нового фокусного расстояния
     *
     * Устанавливает новое фокусное расстояние. Должно быть в диапазоне от 0.1 до 10.0 включая
     * границы
     */
    void SetFocalLength(const float new_focal_length);

private:
    /**
     * @brief Пересчёт векторов
     *
     * Пересчитывает вектора направлений камеры
     */
    void UpdateVectors();

    static constexpr Vector kWorldUp{0, 0, 1};  // фиксация оси Z сцены как направления вверх

    Point position_;
    Vector front_;
    Vector up_;
    Vector right_;
    float yaw_;
    float pitch_;
    float fov_x_;
    float focal_length_;
};

}  // namespace renderer
