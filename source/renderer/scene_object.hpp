/**
 * @file
 * @brief Объект в сцене
 */

#pragma once

#include "renderer/types.hpp"

namespace renderer {

/**
 * @brief Класс с информацией о положении объекта в сцене, его трансформации и расположении граней в
 * хранилище сцены
 */
class SceneObject {
public:
    /**
     * @brief Создание SceneObject
     *
     * Все углы измеряются в градусах против часовой стрелки относительно направления оси.
     * Масштабирование производится относительно центра координат объекта
     *
     * Значения по умолчанию:
     * - Позиция (0, 0, 0)
     * - Углы поворота вокруг всех осей равны 0
     * - Масштаб 1
     *
     * @param[in] begin Индекс начала граней объекта в хранилище сцены
     * @param[in] size Количество граней
     * @param[in] position Начальная позиция объекта
     * @param[in] x_angle Начальный поворот вокруг оси x
     * @param[in] y_angle Начальный поворот вокруг оси y
     * @param[in] z_angle Начальный поворот вокруг оси z
     * @param[in] scale Начальный масштаб
     */
    SceneObject(const size_t begin, const size_t size, const Point& position = Point{0, 0, 0},
                const float x_angle = 0, const float y_angle = 0, const float z_angle = 0,
                const float scale = 1);

    /**
     * @brief Матрица перевода координат объекта в координаты сцены
     *
     * Возвращает матрицу перевода координат объекта в координаты сцены. Выполняются следующие
     * преобразования объекта:
     * - Объект растягивается относительно своего начала координат. Коэффициент задается масштабом,
     * отрицательный масштаб соответствует дополнительному отражению относительно начала координат
     * объекта
     * - Объект поворачивается вокруг координатных осей объекта на заданные углы
     * - Начало координат переносится в заданную точку
     *
     * @return Матрица перевода координат
     */
    Matrix GetObjectMatrix() const;

    /**
     * @brief Доступ к позиции
     *
     * Возвращает ссылку на позицию объекта
     *
     * @return Ссылка на позицию объекта
     */
    Point& AccessPosition();

    /**
     * @brief Доступ к позиции
     *
     * Возвращает константную ссылку на позицию объекта
     *
     * @return Константная ссылка на позицию объекта
     */
    const Point& AccessPosition() const;

    /**
     * @brief Доступ к углу X
     *
     * Возвращает ссылку на угол объекта по оси X
     *
     * @return Ссылка на угол X
     */
    float& AccessXAngle();

    /**
     * @brief Доступ к углу X
     *
     * Возвращает константную ссылку на угол объекта по оси X
     *
     * @return Константная ссылка на угол X
     */
    const float& AccessXAngle() const;

    /**
     * @brief Доступ к углу Y
     *
     * Возвращает ссылку на угол объекта по оси Y
     *
     * @return Ссылка на угол Y
     */
    float& AccessYAngle();

    /**
     * @brief Доступ к углу Y
     *
     * Возвращает константную ссылку на угол объекта по оси Y
     *
     * @return Константная ссылка на угол Y
     */
    const float& AccessYAngle() const;

    /**
     * @brief Доступ к углу Z
     *
     * Возвращает ссылку на угол объекта по оси Z
     *
     * @return Ссылка на угол Z
     */
    float& AccessZAngle();

    /**
     * @brief Доступ к углу Z
     *
     * Возвращает константную ссылку на угол объекта по оси Z
     *
     * @return Константная ссылка на угол Z
     */
    const float& AccessZAngle() const;

    /**
     * @brief Доступ к масштабу
     *
     * Возвращает ссылку на масштаб объекта
     *
     * @return Ссылка на масштаб
     */
    float& AccessScale();

    /**
     * @brief Доступ к масштабу
     *
     * Возвращает константную ссылку на масштаб объекта
     *
     * @return Константная ссылка на масштаб
     */
    const float& AccessScale() const;

    /**
     * @brief Индекс начала граней объекта
     *
     * Возвращает индекс начала граней объекта
     *
     * @return Индекс начала граней объекта
     */
    size_t Begin() const;

    /**
     * @brief Количество граней объекта
     *
     * Возвращает количество граней объекта
     *
     * @return Количество граней объекта
     */
    size_t Size() const;

private:
    Point position_{0, 0, 0};
    float x_angle_{0};
    float y_angle_{0};
    float z_angle_{0};
    float scale_{1};
    size_t begin_;
    size_t size_;
};

};  // namespace renderer
