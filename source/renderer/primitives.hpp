/**
 * @file
 * @brief Графические примитивы
 */

#pragma once

#include <glm/vec3.hpp>
#include <glm/vec4.hpp>

namespace renderer {

/**
 * @brief Точка в пространстве
 *
 * Точка задана в декартовых координатах x, y, z
 */
using Point = glm::vec3;

/**
 * @brief Точка в проективном пространстве
 *
 * Точка задана в однородных координатах, для чего добавлена координата w, которая не может быть
 * равна 0
 */
using Point4 = glm::vec4;

/**
 * @brief Вектор в пространстве
 *
 * Вектор задана в декартовых координатах x, y, z
 */
using Vector = glm::vec3;

/**
 * @brief Вектор в проективном пространстве
 *
 * Вектор задан в однородных координатах, для чего добавлена координата w, которая обязательно
 * должна быть равна 0
 */
using Vector4 = glm::vec4;

/**
 * @brief Вершина
 *
 * Вершина в пространстве
 */
struct Vertex {
    /**
     * @brief Точка, задаваемая вершиной
     *
     * Хранит точку в декартовом пространстве, задаваемую вершиной
     */
    Point point;
};

/**
 * @brief Треугольная грань
 */
struct Triangle {
    /**
     * @brief Вершины грани
     *
     * Задают 3 вершины грани. Внешней стороной считается та сторона, относительно которой вершины
     * перечислены против часовой стрелки
     */
    Vertex vertices[3];
};
};  // namespace renderer
